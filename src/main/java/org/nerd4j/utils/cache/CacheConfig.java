/*-
 * #%L
 * Nerd4j Utils
 * %%
 * Copyright (C) 2011 - 2020 Nerd4j
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 * 
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-3.0.html>.
 * #L%
 */
package org.nerd4j.utils.cache;


import org.nerd4j.utils.lang.Equals;
import org.nerd4j.utils.lang.Hashcode;
import org.nerd4j.utils.lang.Require;
import org.nerd4j.utils.lang.ToString;

/**
 * Immutable object collecting all the configurations
 * needed by the {@link SelfLoadingCache}.
 *
 * @author Massimo Coluzzi
 * @since 2.1.0
 */
public class CacheConfig
{


    /** Default duration of a cache entry in milliseconds (60 minutes). */
    protected static final long DEFAULT_CACHE_DURATION = 60 * 60 * 1000;

    /**
     *  Default duration in milliseconds used by the method
     *  {@link CacheProvider#touch(CacheKey,long)} (10 minutes).
     */
    protected static final long DEFAULT_TOUCH_DURATION = 10 * 60 * 1000;

    /** The {@code Singleton} instance of the default configuration. */
    private static final CacheConfig DEFAULT = new CacheConfig();

    /**
     * Tells if all the {@link SelfLoadingCache}s in the system are disabled.
     * If this flag is set to {@code true} all the caching will be skipped
     * and all data will be loaded on each request.
     * <p>
     * This option should be used to debugging purposes only, using this option
     * in production can be very dangerous.
     */
    protected static boolean disabledAll;

    static
    {

        final String property = System.getProperty( "org.nerd4j.utils.cache.SelfLoadingCache.disabled" );
        disabledAll = "true".equalsIgnoreCase( property );

    }


    /**
     * Actual duration of a cache entry in milliseconds.
     * By default this values is set to 1 hour (3600000 ms).
     */
    private final long cacheDuration;

    /**
     * Number of milliseconds to defer a cache entry expiration to.
     * By default this values is set to 10 minutes (600000 ms).
     */
    private final long touchDuration;

    /**
     * Tells if the insert of a new entry in the cache
     * should be done asynchronously.
     * By default this value is {@code false} forcing the
     * requesting thread to load and return the expected data.
     */
    private final boolean asyncInsert;

    /**
     * Tells if the update of an existing entry in the
     * cache should be done asynchronously.
     * By default this value is {@code true} allowing
     * the current thread to return immediately the cached value.
     */
    private final boolean asyncUpdate;

    /**
     * Tells if any exception generated by the {@link CacheProvider}
     * should be thrown. By default this values is {@code false}
     * because an error in the caching system should not cause
     * a crash in the application.
     */
    private final boolean throwCacheProviderExceptions;

    /**
     * This field will keep the output of the method {@ling #toString()}
     * to avoid the creation of a new {@link String} at each invocation.
     * But this field is marked as {@code transient} and therefore will
     * not be serialised.
     */
    private transient String toStringOutcome;


    /**
     * Default constructor.
     * <p>
     * This constructor is intended to be used
     * by reflection during de-serialization.
     * <p>
     * To create a new cache configuration
     * use the factory methods.
     */
    protected CacheConfig()
    {

        this(
            DEFAULT_CACHE_DURATION, DEFAULT_TOUCH_DURATION,
            false, true, false
        );

    }

    /**
     * Constructor with parameters.
     * <p>
     * This constructor is intended to be used
     * by extending classes only.
     * <p>
     * To create a new cache configuration
     * use the factory methods.
     *
     * @param cacheDuration duration of the cache entry after put.
     * @param touchDuration duration of the cache entry after touch.
     * @param asyncInsert   tells if the insert should be done asynchronously.
     * @param asyncUpdate   tells if the update should be done asynchronously.
     * @param throwCacheProviderExceptions tells if any exception generated by
     *                                     the {@link CacheProvider} should be
     *                                     thrown.
     */
    protected CacheConfig( long cacheDuration, long touchDuration,
                           boolean asyncInsert, boolean asyncUpdate,
                           boolean throwCacheProviderExceptions )
    {

        super();

        this.cacheDuration   = Require.trueFor( cacheDuration, cacheDuration > 0, "The cache duration must be > 0" );
        this.touchDuration   = Require.trueFor( touchDuration, touchDuration > 0, "The touch duration must be > 0" );

        this.asyncInsert     = asyncInsert;
        this.asyncUpdate     = asyncUpdate;

        this.toStringOutcome = null;
        this.throwCacheProviderExceptions = throwCacheProviderExceptions;

    }


    /* ***************** */
    /*  FACTORY METHODS  */
    /* ***************** */


    /**
     * Creates a new {@link CacheConfig} with the following
     * default values:
     * <ul>
     *  <li>{@link #getCacheDuration()} = {@link #DEFAULT_CACHE_DURATION}</li>
     *  <li>{@link #getTouchDuration()} = {@link #DEFAULT_TOUCH_DURATION}</li>
     *  <li>{@link #isAsyncInsert()}    = {@code false}</li>
     *  <li>{@link #isAsyncUpdate()}    = {@code true}</li>
     *  <li>{@link #isThrowCacheProviderExceptions()} = {@code false}</li>
     * </ul>
     *
     * @return a new {@link CacheConfig} with default values.
     */
    public static CacheConfig getDefault()
    {

        return DEFAULT;

    }

    /**
     * Creates a new {@link CacheConfig} with the default cache and touch
     * durations and given values.
     *
     * @param asyncInsert   tells if the insert should be done asynchronously.
     * @param asyncUpdate   tells if the update should be done asynchronously.
     * @param throwCacheProviderExceptions tells if any exception generated by
     *                                     the {@link CacheProvider} should be
     *                                     thrown.
     * @return a new {@link CacheConfig} with the given values.
     */
    public static CacheConfig of( boolean asyncInsert, boolean asyncUpdate,
                                  boolean throwCacheProviderExceptions )
    {

        return new CacheConfig(
            DEFAULT_CACHE_DURATION, DEFAULT_TOUCH_DURATION,
            asyncInsert, asyncUpdate,
            throwCacheProviderExceptions
        );

    }

    /**
     * Creates a new {@link CacheConfig} with the given values.
     *
     * @param cacheDuration duration of the cache entry after put.
     * @param touchDuration duration of the cache entry after touch.
     * @param asyncInsert   tells if the insert should be done asynchronously.
     * @param asyncUpdate   tells if the update should be done asynchronously.
     * @param throwCacheProviderExceptions tells if any exception generated by
     *                                     the {@link CacheProvider} should be
     *                                     thrown.
     * @return a new {@link CacheConfig} with the given values.
     */
    public static CacheConfig of( long cacheDuration, long touchDuration,
                                  boolean asyncInsert, boolean asyncUpdate,
                                  boolean throwCacheProviderExceptions )
    {

        return new CacheConfig(
            cacheDuration, touchDuration,
            asyncInsert, asyncUpdate,
            throwCacheProviderExceptions
        );

    }


    /* *********************** */
    /*  CONFIGURATION METHODS  */
    /* *********************** */


    /**
     * Invoking this method with {@code true} will disable all {@link SelfLoadingCache}
     * instances in the system. All the caching will be skipped and all data will be
     * loaded from the {@link DataProvider} on each request.
     * <p>
     * This option should be used to debugging purposes only, using this option
     * in production can be very dangerous.
     * <p>
     * Invoking this method with {@code false} will restore the caching process.
     *
     * @param disable tells if all {@link SelfLoadingCache} instances need to stop
     *                all caching operations.
     */
    public static void disableAll( boolean disable )
    {

        disabledAll = disable;

    }

    /**
     * Returns the duration of a cache entry in milliseconds.
     *
     * @return the duration of a cache entry in milliseconds.
     */
    public long getCacheDuration()
    {
        return cacheDuration;
    }

    /**
     * Returns the number of milliseconds to defer
     * a cache entry expiration to, during update.
     *
     * @return the number of milliseconds to defer
     * a cache entry expiration to, during update.
     */
    public long getTouchDuration()
    {
        return touchDuration;
    }

    /**
     * Tells if the insert of a new entry in the cache
     * should be done asynchronously.
     *
     * @return {@code true} if the insert of a new entry
     * in the cache should be done asynchronously.
     */
    public boolean isAsyncInsert()
    {
        return asyncInsert;
    }

    /**
     * Tells if the update of an existing entry in the cache
     * should be done asynchronously.
     *
     * @return {@code true} if the insert of an existing entry
     * in the cache should be done asynchronously.
     */
    public boolean isAsyncUpdate()
    {
        return asyncUpdate;
    }

    /**
     * Tells if any exception generated by the {@link CacheProvider}
     * should be propagated outside the {@link SelfLoadingCache}.
     * By default this values is {@code false} because an error
     * in the caching system should not cause a crash in the
     * application.
     *
     * @return {@code true} if any exception generated by
     * the {@link CacheProvider} should be thrown.
     */
    public boolean isThrowCacheProviderExceptions()
    {
        return throwCacheProviderExceptions;
    }


    /* ****************** */
    /*  OBJECT OVERRIDES  */
    /* ****************** */


    /**
     * {@inheritDoc}
     */
    @Override
    public int hashCode()
    {
        return Hashcode.of( cacheDuration, touchDuration, asyncInsert, asyncUpdate, throwCacheProviderExceptions );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean equals( Object other )
    {

        return Equals.ifSameClass(
            this, other,
            o -> o.cacheDuration,
            o -> o.touchDuration,
            o -> o.asyncInsert,
            o -> o.asyncUpdate,
            o -> o.throwCacheProviderExceptions
        );

    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String toString()
    {

        if( toStringOutcome == null )
            toStringOutcome = ToString.of( this )
            .print( "cacheDuration", cacheDuration )
            .print( "touchDuration", touchDuration )
            .print( "asyncInsert", asyncInsert )
            .print( "asyncUpdate", asyncUpdate )
            .print( "throwCacheProviderExceptions", throwCacheProviderExceptions )
            .likeIntellij();

        return toStringOutcome;

    }

}
